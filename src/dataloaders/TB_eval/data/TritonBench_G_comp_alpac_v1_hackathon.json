[{"instruction": "You are a expert in writing Triton operators for efficient GPU programming. Use triton language write a kernel and wrapper according following instruction.\n        The Triton kernel `_swiglu_fwd_kernel` is designed to perform the Swiglu operation for the forward pass, where each element of the input `X` is multiplied by its sigmoid activation and then multiplied by the corresponding element in `Y`. The kernel is implemented with `@triton.jit`, allowing it to run on the GPU efficiently. It is autotuned over various configurations to handle different block sizes, optimizing performance based on the `ncols` parameter. The kernel uses Triton's `program_id` to determine which row and block of columns to process. The `load` function fetches data from the input tensors, and the `store` function writes the result to the `OUT` tensor. The function `_swiglu_fwd` prepares input tensors `x` and `y`, ensuring they are contiguous and splitting them from the input `xy`. It also reshapes the tensors as needed and initializes the output tensor. The grid is defined based on the number of rows (`M`) and columns (`N`) using `triton.cdiv` to calculate blocks per column. The kernel is then launched with the specified grid configuration.\n    ", "input": "", "file": "swiglu_fwd.py", "difficulty": "3"}, {"instruction": "You are a expert in writing Triton operators for efficient GPU programming. Use triton language write a kernel and wrapper according following instruction.\n            The provided Triton operator code implements a matrix-vector multiplication kernel, `mv_kernel`, designed for efficient execution on NVIDIA GPUs. It leverages Triton's Just-In-Time (JIT) compilation and auto-tuning features. The kernel function multiplies a matrix `A` of size N x M with a vector `B` of size M, resulting in an output vector `C` of size N. The kernel is parameterized by constants `BLOCK_N` and `BLOCK_M` which determine the tile sizes for the computation, allowing for optimal parallel processing. Within `mv_kernel`, a loop iterates over the matrix A in blocks of `BLOCK_M` to load sub-matrices and the corresponding block from vector B, performing element-wise multiplication and accumulation in shared memory. The partial results are then reduced along the rows and stored in the output vector `C`. The `mv` function wraps this kernel execution, asserting dimension compatibility and managing CUDA resources for launching the kernel with calculated grid dimensions.\n            ", "input": "", "file": "matrix_vector_multip.py", "difficulty": "4"}, {"instruction": "You are a expert in writing Triton operators for efficient GPU programming. Use triton language write a kernel and wrapper according following instruction.\n        The provided Triton kernel, `matmul_kernel`, is a specialized GPU matrix multiplication operation. \n        It employs a blocked tiling strategy for efficient computation of the result matrix `c` from input matrices `a` and `b`. \n        Within this kernel, operations are parallelized across blocks defined by BLOCK_SIZE_M, BLOCK_SIZE_N, and BLOCK_SIZE_K. \n        These blocks allow the kernel to load sub-matrices, perform computations, and manage memory more efficiently.\n\n        The kernel begins by computing indices for thread execution, segmenting the operation across various program IDs derived from the grid dimensions. \n        For each thread block, it computes offsets `offs_am`, `offs_bn`, and `offs_k` to read data from the input matrices.\n\n        In a loop iterating over slices of the K dimension, sub-matrices are loaded using `tl.load` with masks to handle boundary conditions. \n        These matrices are then multiplied using `tl.dot`, accumulating results in a local accumulator. \n        Memory access patterns are optimized using `tl.max_contiguous` and `tl.multiple_of` to align data in cache-friendly ways.\n\n        The function finally writes the accumulated results to the output matrix `c`, with care taken to respect bounds and using conditional storage via `tl.store`.\n\n        The `matmul` function wraps this kernel, preparing inputs and meta-parameters based on the matrix data types and dimensions. \n        It enforces input compatibility, establishes execution grid dimensions, and sets device memory for output. \n        Configuration parameters such as BLOCK_SIZE_M, num_stages, and num_warps are determined per data type, \n        ensuring optimal kernel execution tailored for either float16 or Triton's experimental float8 types.\n    ", "input": "", "file": "triton_matmul.py", "difficulty": "3"}, {"instruction": "You are a expert in writing Triton operators for efficient GPU programming. Use triton language write a kernel and wrapper according following instruction.\n            The Triton-accelerated function embedding_kernel is specialized for extracting and storing embedding vectors from a weight matrix for a sequence of token IDs. It uses program IDs to determine processing offsets and handles iteration over sequences with BLOCK_N and BLOCK_NN stride sizes. For each sequence, it computes token IDs and uses masks to ensure only valid data is loaded and processed. The weight matrix is addressed using a combination of token IDs and dimension offsets, facilitated by the stride of the weight tensor. The processed vectors are then stored into the 'out' tensor using calculated strides and masks, ensuring each output sequence position receives the correct embedding vector. The wrapping function, embedding, configures and invokes the kernel with appropriate grid settings, aligning BLOCK_DMODEL to the next power of two based on weight dimensions and leveraging constant memory settings to optimize the embedding extraction process.\n            ", "input": "", "file": "embedding_triton_kernel.py", "difficulty": "3"}, {"instruction": "You are a expert in writing Triton operators for efficient GPU programming. Use triton language write a kernel and wrapper according following instruction.\n        The code defines a Triton-based kernel for matrix multiplication of INT4 quantized weights and provides Python functions to handle the quantization and dequantization processes. \n        The 'matmul_kernel' function is a Triton kernel using @triton.jit which performs matrix multiplication. It processes the input matrices in tiles defined by BLOCK_SIZE_M, BLOCK_SIZE_N, and BLOCK_SIZE_K, and uses a loop to iterate over the K dimension to accumulate results in fp32 precision, subsequently stored in the output buffer, potentially employing atomic add for SPLIT_K > 1.\n        The kernel is set up with a wide variety of configurations, allowing Triton's autotuning capabilities to select optimal parameters based on matrix dimensions M, N, and K. It utilizes quantized INT4 weights, reconstructing them using scales and zero points to compute matrix products accurately. \n        The Python function 'matmul_dequantize_int4_s2' serves as an interface to this kernel, preparing data and launching the computation on specified grid dimensions.\n        The function 'quantize_int4' converts a floating-point weight matrix into INT4 format, organizing the data by packing 8 INT4 values into one INT32 and calculating scaling factors and zero points for each group of elements. \n        The helper function 'unpack_int4' is intended for testing; it unpacks the INT4 matrix back into a floating-point format to verify the quantization process.\n    ", "input": "", "file": "int4_matmul.py", "difficulty": "5"}, {"instruction": "You are a expert in writing Triton operators for efficient GPU programming. Use triton language write a kernel and wrapper according following instruction.\n            The `_fwd_kernel_flash_decode_stage2` Triton kernel is a parallel computation designed for processing sequences in a neural network context, specifically dealing with batches, heads, and sequence blocks. This kernel receives several inputs: `B_Seqlen`, `Mid_O`, `Mid_O_LogExpSum`, and `Out`, along with strides for indexing. `B_Seqlen` contains sequence lengths per batch, `Mid_O` contains intermediate outputs, `Mid_O_LogExpSum` holds log-exp sum values, and `Out` will store the final output. The kernel operates over a 2D grid defined by batch size and head count (`grid = (batch, head_num)`), with constants `BLOCK_SEQ` and `BLOCK_DMODEL` indicating sequence block size and dimension alignment respectively.\n\n            The kernel function operates as follows:\n            - Identifies the current batch and head using `tl.program_id`.\n            - Initializes accumulators: `sum_exp`, `max_logic`, and `acc` to accumulate exponential logic and values.\n            - Loads the current sequence length and calculates the number of sequence blocks (`block_n_size`).\n            - Iterates over each block, where:\n                - It loads values (`tv`) from `Mid_O` and logic sums (`tlogic`) from `Mid_O_LogExpSum`.\n                - Computes the maximum logic value across blocks and scales previous accumulations.\n                - Updates the accumulators by computing the exponential of adjusted logic values and scaling/accumulating.\n            - Stores the final normalized result into `Out`, scaling accumulated values by the sum of exponentials.\n\n            The `flash_decode_stage2` function sets up and invokes this kernel, determining dimensions and grid setup based on input tensor shapes. It ensures efficient computation by using Triton's parallel execution framework, specifying warp and stage numbers.\n            ", "input": "", "file": "flash_decode2_phi.py", "difficulty": "2"}, {"instruction": "You are a expert in writing Triton operators for efficient GPU programming. Use triton language write a kernel and wrapper according following instruction.\n        The `rotary_kernel` function is a Triton kernel that performs rotary position encoding on a tensor `X` using precomputed cosine (`COS`) and sine (`SIN`) matrices. It modifies or populates the output tensor `OUT` with the transformed data. The kernel accommodates both fixed and variable sequence lengths, controlled by the presence of `CU_SEQLENS`. The kernel handles interleaved and non-interleaved formats and allows for in-place transformations and conjugate computations if specified.\n\n        The kernel operates in a three-dimensional grid, processing batches (`pid_batch`), heads (`pid_head`), and sequences (`pid_m`). It calculates transformations by loading blocks of data and applying rotary transformations based on cosine and sine values. The key operations are tailored based on whether the data is interleaved or not, with conditional handling for conjugation using `CONJUGATE`.\n\n        The `apply_rotary` function acts as a high-level interface to the Triton kernel. It accepts the input tensor `x`, cosine and sine matrices, sequence length offsets, and optional cumulative sequence lengths (`cu_seqlens`). The function determines the execution grid and block sizes, aligning them with the input data shape and configuration. It initializes an output tensor, copying non-rotary parts of `x` if required. The function ensures that the kernel is called with appropriate arguments, matching the shape and type expectations set within the kernel logic. This design allows for efficient rotary transformations in transformer architectures.\n    ", "input": "", "file": "rotary_transform.py", "difficulty": "4"}, {"instruction": "You are a expert in writing Triton operators for efficient GPU programming. Use triton language write a kernel and wrapper according following instruction.\n        The code implements a Triton kernel `matmul_kernel` to perform matrix multiplication C = A x B, where A has shape (M, K) and B has shape (K, N), resulting in matrix C with shape (M, N). The kernel processes blocks of A and B defined by `BLOCK_SIZE_M`, `BLOCK_SIZE_N`, and `BLOCK_SIZE_K`, with parallel execution managed using a grid of program IDs. The kernel computes a block of C by iteratively loading blocks of A and B, performing dot products, and accumulating the results in the `accumulator`. Optionally, a leaky ReLU activation is applied to the `accumulator`. The final block result is stored in C using Triton's memory operations, with handling for matrix boundaries via masks. The `matmul` function serves as a high-level interface, ensuring input validity, preparing execution parameters, and invoking the kernel. It accepts optional activation, setting `ACTIVATION` based on user input.\n    ", "input": "", "file": "matmul_leakyrelu.py", "difficulty": "3"}, {"instruction": "You are a expert in writing Triton operators for efficient GPU programming. Use triton language write a kernel and wrapper according following instruction.\n            This Triton kernel `cos_func` is designed to compute the cosine of each element in an input tensor `a` and write the results to an output tensor `b`. \n            It uses a configurable constant `BLOCK_SIZE` which dictates the number of elements each parallel thread block processes. The `offset` variable is calculated to give each block its starting point by considering the global program id and the thread's local position in the block using `tl.arange`. \n            The `mask` variable is created to ensure calculations are only performed on valid tensor elements within bounds. \n            The elements from `a` are loaded into `a_value` using `tl.load`, respecting the bounds defined by `mask`. \n            The cosine of each element is computed with `tl.cos` and stored in the `b_value` tensor. Finally, results are written to the output tensor `b` using `tl.store`, again with the `mask` ensuring correct boundaries. \n            The `cos` function in Python acts as a driver for the Triton kernel, preparing the input and output tensors, calculating the block size as the nearest power of 2 greater than the square root of the number of elements, and determining the grid size to cover all elements. It then executes the kernel with these parameters.\n            ", "input": "", "file": "cosine_compute.py", "difficulty": "1"}, {"instruction": "You are a expert in writing Triton operators for efficient GPU programming. Use triton language write a kernel and wrapper according following instruction.\n    The Triton kernel `_l2_norm_bwd_kernel` performs a backward pass operation for L2 normalization on a per-row basis. It receives pointers to input `X`, output gradient `DY`, and calculates the input gradient `DX`. Each row of the input is accessed using the `stride_x_row`. `BLOCK_N` determines the number of elements processed per block, set based on maximum allowable fused size and next power of 2 of `N`. Within the kernel, it computes the variance of the input slice, uses it to compute the reciprocal of the standard deviation (`rstd`), and then calculates `dx` using the formula `dy * rstd - tl.sum(dy * x) * (1 / (var+eps)) * rstd * x`. The result is conditionally stored in `DX` using masks. The `_l2_norm_bwd` function orchestrates this process, ensuring input tensors `x` and `dy` are properly reshaped and their strides configured for contiguity if necessary. If `N` exceeds `BLOCK_N`, an error is raised to prevent excessive feature dimensions. Finally, the kernel is launched over `M` rows of the reshaped tensors, and the output `dx` is reshaped back to the original input shape.\n    ", "input": "", "file": "l2_norm_bwd.py", "difficulty": "3"}]